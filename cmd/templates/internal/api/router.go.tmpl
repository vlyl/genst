package api

import (
	"time"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"go.uber.org/zap"

	_ "{{.ModuleName}}/docs" // Import swagger docs
	"{{.ModuleName}}/internal/api/ping"
	"{{.ModuleName}}/pkg/logger"
)

// @title {{.ProjectName}} API
// @version 1.0
// @description This is the API documentation for {{.ProjectName}}.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host localhost:8080
// @BasePath /
// @schemes http https
func SetupRouter() *gin.Engine {
	// Set gin mode
	gin.SetMode(gin.ReleaseMode)

	// Use zap as gin's logger
	gin.DefaultWriter = &zapWriter{logger: logger.Get()}

	router := gin.New()
	
	// Use zap logger and recovery middleware
	router.Use(ginLogger(), gin.Recovery())

	// Register swagger docs
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Health check endpoint
	router.GET("/ping", ping.Handler)

	return router
}

// Gin middleware to log requests using zap
func ginLogger() gin.HandlerFunc {
	l := logger.With(zap.String("component", "http"))
	return func(c *gin.Context) {
		start := time.Now()
		path := c.Request.URL.Path
		query := c.Request.URL.RawQuery

		c.Next()

		fields := []zap.Field{
			zap.Int("status", c.Writer.Status()),
			zap.String("method", c.Request.Method),
			zap.String("path", path),
			zap.String("query", query),
			zap.String("ip", c.ClientIP()),
			zap.Duration("latency", time.Since(start)),
			zap.String("ua", c.Request.UserAgent()),
		}

		status := c.Writer.Status()
		switch {
		case status >= 500:
			l.Error("Server error", fields...)
		case status >= 400:
			l.Warn("Client error", fields...)
		default:
			l.Info("Request", fields...)
		}
	}
}

// zapWriter wraps zap logger to implement io.Writer
type zapWriter struct {
	logger *zap.Logger
}

func (w *zapWriter) Write(p []byte) (n int, err error) {
	w.logger.Info(string(p))
	return len(p), nil
}
