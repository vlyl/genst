package logger

import (
	"fmt"
	"io"
	"os"
	"time"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"

	"{{.ModuleName}}/internal/config"
)

var log *zap.Logger

func Init(level string) error {
	cfg := config.Get()

	// Use config level if command line level is not specified
	if level == "" {
		level = cfg.Log.Level
	}

	// Parse log level
	var zapLevel zapcore.Level
	if err := zapLevel.UnmarshalText([]byte(level)); err != nil {
		return fmt.Errorf("invalid log level: %w", err)
	}

	// Create encoder configs
	consoleEncoder := zapcore.NewConsoleEncoder(zapcore.EncoderConfig{
		TimeKey:        "",
		LevelKey:       "L",
		NameKey:        "N",
		CallerKey:      "C",
		FunctionKey:    zapcore.OmitKey,
		MessageKey:     "M",
		StacktraceKey:  "S",
		LineEnding:     zapcore.DefaultLineEnding,
		EncodeLevel:    zapcore.CapitalColorLevelEncoder,
		EncodeTime:     zapcore.ISO8601TimeEncoder,
		EncodeDuration: zapcore.StringDurationEncoder,
		EncodeCaller:   zapcore.ShortCallerEncoder,
		EncodeName:     zapcore.FullNameEncoder,
	})

	// Create outputs
	consoleDecorator := zapcore.NewConsoleEncoder(zapcore.EncoderConfig{
		TimeKey:        "",
		EncodeTime:     zapcore.TimeEncoderOfLayout("2006-01-02 15:04:05"),
		LineEnding:     "",
	})

	consoleOutput := zapcore.AddSync(&prefixWriter{
		out:      os.Stdout,
		encoder:  consoleDecorator,
		timeKey:  "ts",
	})

	fileOutput := zapcore.AddSync(&lumberjack.Logger{
		Filename:   cfg.Log.File.Path,
		MaxSize:    cfg.Log.File.MaxSize,
		MaxAge:     cfg.Log.File.MaxAge,
		MaxBackups: cfg.Log.File.MaxBackups,
		Compress:   cfg.Log.File.Compress,
	})

	// Create core with multiple outputs
	core := zapcore.NewTee(
		zapcore.NewCore(consoleEncoder, consoleOutput, zapLevel),
		zapcore.NewCore(zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()), fileOutput, zapLevel),
	)

	// Create logger with caller info
	log = zap.New(core, zap.AddCaller(), zap.AddCallerSkip(1))

	// Create logs directory if it doesn't exist
	if err := os.MkdirAll("logs", 0755); err != nil {
		return fmt.Errorf("failed to create logs directory: %w", err)
	}

	// Log initialization success
	Info("Logger initialized",
		zap.String("level", level),
		zap.String("file", cfg.Log.File.Path),
	)

	return nil
}

// prefixWriter adds timestamp prefix to each log line
type prefixWriter struct {
	out      io.Writer
	encoder  zapcore.Encoder
	timeKey  string
}

func (w *prefixWriter) Write(p []byte) (n int, err error) {
	// Add timestamp
	entry := zapcore.Entry{Time: time.Now()}
	buf, err := w.encoder.EncodeEntry(entry, []zapcore.Field{})
	if err != nil {
		return 0, err
	}
	
	// Write timestamp and log message
	_, err = fmt.Fprintf(w.out, "%s%s", buf.String(), p)
	if err != nil {
		return 0, err
	}
	return len(p), nil
}

// Sugar returns a sugared logger
func Sugar() *zap.SugaredLogger {
	return log.Sugar()
}

// Get returns the global logger instance
func Get() *zap.Logger {
	return log
}

// Named returns a named logger
func Named(name string) *zap.Logger {
	return log.Named(name)
}

// With creates a child logger and adds structured context to it
func With(fields ...zap.Field) *zap.Logger {
	return log.With(fields...)
}

func Info(msg string, fields ...zap.Field) {
	log.Info(msg, fields...)
}

func Error(msg string, fields ...zap.Field) {
	log.Error(msg, fields...)
}

func Debug(msg string, fields ...zap.Field) {
	log.Debug(msg, fields...)
}

func Warn(msg string, fields ...zap.Field) {
	log.Warn(msg, fields...)
}
